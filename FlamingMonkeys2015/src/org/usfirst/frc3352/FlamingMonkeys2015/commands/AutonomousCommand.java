// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3352.FlamingMonkeys2015.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3352.FlamingMonkeys2015.Robot;
import org.usfirst.frc3352.FlamingMonkeys2015.RobotMap;

/**
 *
 */
public class  AutonomousCommand extends Command {

	boolean finished = false;
	
    public AutonomousCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.drivetrainLeftEncoder.reset();
    	RobotMap.drivetrainRightEncoder.reset();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
	    	Robot.shifter.shiftDown();
	    	SmartDashboard.putNumber("distance", Robot.drivetrain.leftEncoder.getDistance());
	    	while(-Robot.drivetrain.leftEncoder.getDistance()>-70){
	    		Robot.drivetrain.drive(-.5, -.5);
	    		SmartDashboard.putNumber("distance", Robot.drivetrain.leftEncoder.getDistance());
	    	}
	    	/*while(-Robot.drivetrain.leftEncoder.getDistance()<165){
	    		Robot.drivetrain.drive(.3, .3);
	    		SmartDashboard.putNumber("distance", Robot.drivetrain.leftEncoder.getDistance());
	    	}
	    	while(-Robot.drivetrain.leftEncoder.getDistance()>165){
	    		Robot.drivetrain.drive(-.2, -.2);
	    		SmartDashboard.putNumber("distance", Robot.drivetrain.leftEncoder.getDistance());
	    	}*/
	    	Robot.drivetrain.drive(0, 0);
	    	finished = true;
    
    }
    
    

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	
        return finished;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drivetrain.drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
